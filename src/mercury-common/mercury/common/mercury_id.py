# Copyright 2015 Jared Rodriguez (jared at blacknode dot net)
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

"""\
Functions for grabbing a MercuryID

MercuryID or mercury_id meta and hash value


[meta] - 00 = hash generated by interface mac addresses
         01 = hash generated by asset tag and serial number (concat)
         ... More to come .. Will spend more time on identity after the prototype
"""
import hashlib
import logging

from mercury.common.exceptions import MercuryIdException

LOG = logging.getLogger(__name__)

META_TYPE_MAC = '00'
META_TYPE_ASSET_SERIAL = '01'


def _build_hash(target, meta_type):
    digest = hashlib.sha1(target).hexdigest()
    return meta_type + digest


def get_embedded(inspected_interfaces):
    embedded_interfaces = []
    for interface in inspected_interfaces:
        _biosdevname = interface['predictable_names'].get('biosdevname', '')
        if _biosdevname:
            if 'em' in _biosdevname:
                embedded_interfaces.append(interface)
    return embedded_interfaces


def concat_asset_and_serial_data(dmi):
    asset_tag = dmi.get('chassis_asset_tag', '')
    serial_number = dmi.get('chassis_serial', '')

    for x in [asset_tag, serial_number]:
        if x is None:
            return

        if 'O.E.M.' in x:  # To be filled by O.E.M.
            return

    return asset_tag + serial_number


def generate_mercury_id(inspected_dmi, inspected_interfaces):
    asset_hash_value = concat_asset_and_serial_data(inspected_dmi)
    if asset_hash_value:
        target = asset_hash_value
        meta_type = META_TYPE_ASSET_SERIAL
        LOG.debug(
            'Generating mercury ID using asset/serial information: tag=%s, serial=%s' % (
                inspected_dmi['chassis_asset_tag'],
                inspected_dmi['chassis_seria']
            ))
    else:
        meta_type = META_TYPE_MAC
        embedded = get_embedded(inspected_interfaces)
        if embedded:
            LOG.debug('Generating mercury ID using embedded interfaces ')
            inspected_interfaces = embedded
        else:
            LOG.debug('Generating mercury ID using all interfaces')

        target = ''
        for interface in inspected_interfaces:
            address = interface.get('address')  # mac address
            if address:
                target += address

    if not target:
        raise MercuryIdException('Could not generate MercuryId')

    return _build_hash(target, meta_type)
